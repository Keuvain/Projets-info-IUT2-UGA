function cov_1js1scjqaf(){var path="/users/info/etu-2a/zhengke/info2/tp2/fichiers-etudiant/src/knight.js";var hash="d988650210f6cb5dbf73f1bf993b525e1cf2bea2";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/users/info/etu-2a/zhengke/info2/tp2/fichiers-etudiant/src/knight.js",statementMap:{"0":{start:{line:1,column:14},end:{line:1,column:35}},"1":{start:{line:8,column:15},end:{line:11,column:1}},"2":{start:{line:9,column:2},end:{line:9,column:25}},"3":{start:{line:10,column:2},end:{line:10,column:28}},"4":{start:{line:14,column:0},end:{line:14,column:50}},"5":{start:{line:15,column:0},end:{line:15,column:38}},"6":{start:{line:25,column:0},end:{line:40,column:2}},"7":{start:{line:26,column:16},end:{line:29,column:3}},"8":{start:{line:32,column:2},end:{line:37,column:3}},"9":{start:{line:36,column:4},end:{line:36,column:58}},"10":{start:{line:39,column:2},end:{line:39,column:15}},"11":{start:{line:42,column:0},end:{line:42,column:24}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:8,column:15},end:{line:8,column:16}},loc:{start:{line:8,column:34},end:{line:11,column:1}},line:8},"1":{name:"(anonymous_1)",decl:{start:{line:25,column:27},end:{line:25,column:28}},loc:{start:{line:25,column:49},end:{line:40,column:1}},line:25}},branchMap:{"0":{loc:{start:{line:32,column:2},end:{line:37,column:3}},type:"if",locations:[{start:{line:32,column:2},end:{line:37,column:3}},{start:{line:32,column:2},end:{line:37,column:3}}],line:32},"1":{loc:{start:{line:33,column:4},end:{line:34,column:42}},type:"binary-expr",locations:[{start:{line:33,column:5},end:{line:33,column:21}},{start:{line:33,column:25},end:{line:33,column:41}},{start:{line:34,column:5},end:{line:34,column:21}},{start:{line:34,column:25},end:{line:34,column:41}}],line:33}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0,0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"d988650210f6cb5dbf73f1bf993b525e1cf2bea2"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1js1scjqaf=function(){return actualCoverage;};}return actualCoverage;}cov_1js1scjqaf();const Piece=(cov_1js1scjqaf().s[0]++,require('./piece.js'));/**
 * Knight constructor. A knight can leap other pieces.
 * @param {!Object} options - a non-null list of options.
 * @constructor
 */cov_1js1scjqaf().s[1]++;const Knight=function(options){cov_1js1scjqaf().f[0]++;cov_1js1scjqaf().s[2]++;options.canLeap=true;cov_1js1scjqaf().s[3]++;Piece.call(this,options);};// Inheritance definition
cov_1js1scjqaf().s[4]++;Knight.prototype=Object.create(Piece.prototype);cov_1js1scjqaf().s[5]++;Knight.prototype.constructor=Knight;/**
 * Whether a knight can move at a given rank and file.
 *
 * @override
 * @param {number} rank - the rank on the chessboard.
 * @param {number} file - the file on the chessboard.
 * @return {boolean} <code>true</code> if the piece can move, <code>false</code> otherwise.
 */cov_1js1scjqaf().s[6]++;Knight.prototype.canMove=function(rank,file){cov_1js1scjqaf().f[1]++;const delta=(cov_1js1scjqaf().s[7]++,{rank:Math.abs(this.rank-rank),file:Math.abs(this.file-file)});// Only L-shape movements are possible
cov_1js1scjqaf().s[8]++;if((cov_1js1scjqaf().b[1][0]++,delta.rank===1)&&(cov_1js1scjqaf().b[1][1]++,delta.file===2)||(cov_1js1scjqaf().b[1][2]++,delta.rank===2)&&(cov_1js1scjqaf().b[1][3]++,delta.file===1)){cov_1js1scjqaf().b[0][0]++;cov_1js1scjqaf().s[9]++;return Piece.prototype.canMove.call(this,rank,file);}else{cov_1js1scjqaf().b[0][1]++;}cov_1js1scjqaf().s[10]++;return false;};cov_1js1scjqaf().s[11]++;module.exports=Knight;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMWpzMXNjanFhZiIsImFjdHVhbENvdmVyYWdlIiwiUGllY2UiLCJzIiwicmVxdWlyZSIsIktuaWdodCIsIm9wdGlvbnMiLCJmIiwiY2FuTGVhcCIsImNhbGwiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsImNhbk1vdmUiLCJyYW5rIiwiZmlsZSIsImRlbHRhIiwiTWF0aCIsImFicyIsImIiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsia25pZ2h0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFBpZWNlID0gcmVxdWlyZSgnLi9waWVjZS5qcycpO1xuXG4vKipcbiAqIEtuaWdodCBjb25zdHJ1Y3Rvci4gQSBrbmlnaHQgY2FuIGxlYXAgb3RoZXIgcGllY2VzLlxuICogQHBhcmFtIHshT2JqZWN0fSBvcHRpb25zIC0gYSBub24tbnVsbCBsaXN0IG9mIG9wdGlvbnMuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY29uc3QgS25pZ2h0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgb3B0aW9ucy5jYW5MZWFwID0gdHJ1ZTtcbiAgUGllY2UuY2FsbCh0aGlzLCBvcHRpb25zKTtcbn07XG5cbi8vIEluaGVyaXRhbmNlIGRlZmluaXRpb25cbktuaWdodC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFBpZWNlLnByb3RvdHlwZSk7XG5LbmlnaHQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gS25pZ2h0O1xuXG4vKipcbiAqIFdoZXRoZXIgYSBrbmlnaHQgY2FuIG1vdmUgYXQgYSBnaXZlbiByYW5rIGFuZCBmaWxlLlxuICpcbiAqIEBvdmVycmlkZVxuICogQHBhcmFtIHtudW1iZXJ9IHJhbmsgLSB0aGUgcmFuayBvbiB0aGUgY2hlc3Nib2FyZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmaWxlIC0gdGhlIGZpbGUgb24gdGhlIGNoZXNzYm9hcmQuXG4gKiBAcmV0dXJuIHtib29sZWFufSA8Y29kZT50cnVlPC9jb2RlPiBpZiB0aGUgcGllY2UgY2FuIG1vdmUsIDxjb2RlPmZhbHNlPC9jb2RlPiBvdGhlcndpc2UuXG4gKi9cbktuaWdodC5wcm90b3R5cGUuY2FuTW92ZSA9IGZ1bmN0aW9uIChyYW5rLCBmaWxlKSB7XG4gIGNvbnN0IGRlbHRhID0ge1xuICAgIHJhbms6IE1hdGguYWJzKHRoaXMucmFuayAtIHJhbmspLFxuICAgIGZpbGU6IE1hdGguYWJzKHRoaXMuZmlsZSAtIGZpbGUpXG4gIH07XG5cbiAgLy8gT25seSBMLXNoYXBlIG1vdmVtZW50cyBhcmUgcG9zc2libGVcbiAgaWYgKFxuICAgIChkZWx0YS5yYW5rID09PSAxICYmIGRlbHRhLmZpbGUgPT09IDIpIHx8XG4gICAgKGRlbHRhLnJhbmsgPT09IDIgJiYgZGVsdGEuZmlsZSA9PT0gMSlcbiAgKSB7XG4gICAgcmV0dXJuIFBpZWNlLnByb3RvdHlwZS5jYW5Nb3ZlLmNhbGwodGhpcywgcmFuaywgZmlsZSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEtuaWdodDtcbiJdLCJtYXBwaW5ncyI6ImtvRUFlWTtBQUFBQSxjQUFBLFNBQUFBLENBQUEsU0FBQUMsY0FBQSxXQUFBQSxjQUFBLEVBQUFELGNBQUEsR0FmWixLQUFNLENBQUFFLEtBQUssRUFBQUYsY0FBQSxHQUFBRyxDQUFBLE1BQUdDLE9BQU8sQ0FBQyxZQUFZLENBQUMsRUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUpBSixjQUFBLEdBQUFHLENBQUEsTUFLQSxLQUFNLENBQUFFLE1BQU0sQ0FBRyxRQUFBQSxDQUFVQyxPQUFPLENBQUUsQ0FBQU4sY0FBQSxHQUFBTyxDQUFBLE1BQUFQLGNBQUEsR0FBQUcsQ0FBQSxNQUNoQ0csT0FBTyxDQUFDRSxPQUFPLENBQUcsSUFBSSxDQUFDUixjQUFBLEdBQUFHLENBQUEsTUFDdkJELEtBQUssQ0FBQ08sSUFBSSxDQUFDLElBQUksQ0FBRUgsT0FBTyxDQUFDLENBQzNCLENBQUMsQ0FFRDtBQUFBTixjQUFBLEdBQUFHLENBQUEsTUFDQUUsTUFBTSxDQUFDSyxTQUFTLENBQUdDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDVixLQUFLLENBQUNRLFNBQVMsQ0FBQyxDQUFDVixjQUFBLEdBQUFHLENBQUEsTUFDbERFLE1BQU0sQ0FBQ0ssU0FBUyxDQUFDRyxXQUFXLENBQUdSLE1BQU0sQ0FFckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQVBBTCxjQUFBLEdBQUFHLENBQUEsTUFRQUUsTUFBTSxDQUFDSyxTQUFTLENBQUNJLE9BQU8sQ0FBRyxTQUFVQyxJQUFJLENBQUVDLElBQUksQ0FBRSxDQUFBaEIsY0FBQSxHQUFBTyxDQUFBLE1BQy9DLEtBQU0sQ0FBQVUsS0FBSyxFQUFBakIsY0FBQSxHQUFBRyxDQUFBLE1BQUcsQ0FDWlksSUFBSSxDQUFFRyxJQUFJLENBQUNDLEdBQUcsQ0FBQyxJQUFJLENBQUNKLElBQUksQ0FBR0EsSUFBSSxDQUFDLENBQ2hDQyxJQUFJLENBQUVFLElBQUksQ0FBQ0MsR0FBRyxDQUFDLElBQUksQ0FBQ0gsSUFBSSxDQUFHQSxJQUFJLENBQ2pDLENBQUMsRUFFRDtBQUFBaEIsY0FBQSxHQUFBRyxDQUFBLE1BQ0EsR0FDRyxDQUFBSCxjQUFBLEdBQUFvQixDQUFBLFNBQUFILEtBQUssQ0FBQ0YsSUFBSSxHQUFLLENBQUMsSUFBQWYsY0FBQSxHQUFBb0IsQ0FBQSxTQUFJSCxLQUFLLENBQUNELElBQUksR0FBSyxDQUFDLEdBQ3BDLENBQUFoQixjQUFBLEdBQUFvQixDQUFBLFNBQUFILEtBQUssQ0FBQ0YsSUFBSSxHQUFLLENBQUMsSUFBQWYsY0FBQSxHQUFBb0IsQ0FBQSxTQUFJSCxLQUFLLENBQUNELElBQUksR0FBSyxDQUFDLENBQUMsQ0FDdEMsQ0FBQWhCLGNBQUEsR0FBQW9CLENBQUEsU0FBQXBCLGNBQUEsR0FBQUcsQ0FBQSxNQUNBLE1BQU8sQ0FBQUQsS0FBSyxDQUFDUSxTQUFTLENBQUNJLE9BQU8sQ0FBQ0wsSUFBSSxDQUFDLElBQUksQ0FBRU0sSUFBSSxDQUFFQyxJQUFJLENBQUMsQ0FDdkQsQ0FBQyxLQUFBaEIsY0FBQSxHQUFBb0IsQ0FBQSxVQUFBcEIsY0FBQSxHQUFBRyxDQUFBLE9BRUQsTUFBTyxNQUFLLENBQ2QsQ0FBQyxDQUFDSCxjQUFBLEdBQUFHLENBQUEsT0FFRmtCLE1BQU0sQ0FBQ0MsT0FBTyxDQUFHakIsTUFBTSIsImlnbm9yZUxpc3QiOltdfQ==