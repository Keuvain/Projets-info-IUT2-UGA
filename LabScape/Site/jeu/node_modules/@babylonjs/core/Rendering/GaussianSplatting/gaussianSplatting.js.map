{"version":3,"file":"gaussianSplatting.js","sourceRoot":"","sources":["../../../../../dev/core/src/Rendering/GaussianSplatting/gaussianSplatting.ts"],"names":[],"mappings":"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","sourcesContent":["import { Constants } from \"../../Engines/constants\";\r\nimport { Effect } from \"../../Materials/effect\";\r\nimport { RawTexture } from \"../../Materials/Textures/rawTexture\";\r\nimport { ShaderMaterial } from \"../../Materials/shaderMaterial\";\r\nimport { Matrix, Quaternion, TmpVectors, Vector2, Vector3 } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\nimport { VertexData } from \"../../Meshes/mesh.vertexData\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport { Tools } from \"../../Misc/tools\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Logger } from \"../../Misc/logger\";\r\n\r\n/**\r\n * @experimental\r\n * Helper class that loads, creates and manipulates a Gaussian Splatting\r\n */\r\nexport class GaussianSplatting {\r\n    private _vertexCount: number = 0;\r\n    private _positions: Float32Array;\r\n    private _uBuffer: Uint8Array;\r\n    private _covA: Float32Array;\r\n    private _covB: Float32Array;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _sceneBeforeRenderObserver: Nullable<Observer<Scene>>;\r\n    private _material: ShaderMaterial;\r\n    private _modelViewMatrix = Matrix.Identity();\r\n    private _minimum = new Vector3();\r\n    private _maximum = new Vector3();\r\n    /**\r\n     * Name of the GS that is also used to name a mesh for rendering it\r\n     */\r\n    public readonly name: string = \"GaussianSplatting\";\r\n    /**\r\n     * The scene the Gaussian Splatting mesh belongs to\r\n     */\r\n    public readonly scene: Scene;\r\n    /**\r\n     * The mesh responsible for rendering the GS\r\n     */\r\n    public mesh: Nullable<Mesh>;\r\n\r\n    /**\r\n     * Return the number of splattings used\r\n     */\r\n    public get vertexCount(): number {\r\n        return this._vertexCount;\r\n    }\r\n\r\n    /**\r\n     * Shader material with alpha blending\r\n     * @param scene parent scene\r\n     */\r\n    private _createMaterial(scene: Scene) {\r\n        Effect.ShadersStore[\"gaussianSplattingVertexShader\"] = GaussianSplatting._VertexShaderSource;\r\n        Effect.ShadersStore[\"gaussianSplattingFragmentShader\"] = GaussianSplatting._FragmentShaderSource;\r\n        const shaderMaterial = new ShaderMaterial(\r\n            \"GaussianSplattingShader\",\r\n            scene,\r\n            {\r\n                vertex: \"gaussianSplatting\",\r\n                fragment: \"gaussianSplatting\",\r\n            },\r\n            {\r\n                attributes: [\"position\", \"splatIndex\"],\r\n                uniforms: [\"projection\", \"modelView\", \"viewport\", \"dataTextureSize\"],\r\n                samplers: [\"covariancesATexture\", \"covariancesBTexture\", \"centersTexture\", \"colorsTexture\"],\r\n            }\r\n        );\r\n        shaderMaterial.backFaceCulling = false;\r\n        shaderMaterial.alpha = 0.9999;\r\n        this._material = shaderMaterial;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param scene parent scene\r\n     * @returns A simple 2 triangles quad\r\n     */\r\n    private _getMesh(scene: Scene): Mesh {\r\n        const mesh = new Mesh(this.name, scene);\r\n        const vertexData = new VertexData();\r\n        vertexData.positions = [-2, -2, 0, 2, -2, 0, 2, 2, 0, -2, 2, 0];\r\n        vertexData.indices = [0, 1, 2, 0, 2, 3];\r\n        vertexData.applyToMesh(mesh);\r\n        const binfo = mesh.getBoundingInfo();\r\n        binfo.reConstruct(this._minimum, this._maximum);\r\n        binfo.isLocked = true;\r\n        mesh.doNotSyncBoundingInfo = true;\r\n        mesh.material = this._material;\r\n        return mesh;\r\n    }\r\n\r\n    protected _worker: Nullable<Worker> = null;\r\n    protected static _VertexShaderSource = `\r\n        precision mediump float;\r\n\r\n        attribute float splatIndex;\r\n\r\n        attribute vec2 position;\r\n\r\n        uniform highp sampler2D covariancesATexture;\r\n        uniform highp sampler2D covariancesBTexture;\r\n        uniform highp sampler2D centersTexture;\r\n        uniform highp sampler2D colorsTexture;\r\n        uniform vec2 dataTextureSize;\r\n\r\n        uniform mat4 projection;\r\n        uniform mat4 modelView;\r\n        uniform vec2 viewport;\r\n\r\n        varying vec4 vColor;\r\n        varying vec2 vPosition;\r\n\r\n        #if !defined(WEBGL2) && !defined(WEBGPU) && !defined(NATIVE)\r\n        mat3 transpose(mat3 matrix) {\r\n            return mat3(matrix[0][0], matrix[1][0], matrix[2][0],\r\n                matrix[0][1], matrix[1][1], matrix[2][1],\r\n                matrix[0][2], matrix[1][2], matrix[2][2]);\r\n        }\r\n        #endif\r\n\r\n        vec2 getDataUV(float index, vec2 textureSize) {\r\n            float y = floor(index / textureSize.x);\r\n            float x = index - y * textureSize.x;\r\n            return vec2((x + 0.5) / dataTextureSize.x, (y + 0.5) / dataTextureSize.y);\r\n        }\r\n\r\n        void main () {\r\n        vec2 splatUV = getDataUV(splatIndex, dataTextureSize);\r\n        vec3 center = texture2D(centersTexture, splatUV).xyz;\r\n        vec4 color = texture2D(colorsTexture, splatUV);\r\n        vec3 covA = texture2D(covariancesATexture, splatUV).xyz;\r\n        vec3 covB = texture2D(covariancesBTexture, splatUV).xyz;\r\n\r\n        vec4 camspace = modelView * vec4(center, 1);\r\n        vec4 pos2d = projection * camspace;\r\n\r\n        float bounds = 1.2 * pos2d.w;\r\n        if (pos2d.z < -pos2d.w || pos2d.x < -bounds || pos2d.x > bounds\r\n            || pos2d.y < -bounds || pos2d.y > bounds) {\r\n            gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\r\n            return;\r\n        }\r\n\r\n        mat3 Vrk = mat3(\r\n            covA.x, covA.y, covA.z, \r\n            covA.y, covB.x, covB.y,\r\n            covA.z, covB.y, covB.z\r\n        );\r\n        vec2 focal = vec2(1132., 1132.);\r\n        mat3 J = mat3(\r\n            focal.x / camspace.z, 0., -(focal.x * camspace.x) / (camspace.z * camspace.z), \r\n            0., focal.y / camspace.z, -(focal.y * camspace.y) / (camspace.z * camspace.z), \r\n            0., 0., 0.\r\n        );\r\n\r\n        mat3 invy = mat3(1,0,0, 0,-1,0,0,0,1);\r\n\r\n        mat3 T = invy * transpose(mat3(modelView)) * J;\r\n        mat3 cov2d = transpose(T) * Vrk * T;\r\n\r\n        float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;\r\n        float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));\r\n        float lambda1 = mid + radius, lambda2 = mid - radius;\r\n\r\n        if(lambda2 < 0.0) return;\r\n        vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));\r\n        vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;\r\n        vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);\r\n\r\n        vColor = color;\r\n        vPosition = position;\r\n        vec2 vCenter = vec2(pos2d);\r\n        gl_Position = vec4(\r\n            vCenter \r\n            + (position.x * majorAxis * 1. / viewport \r\n            + position.y * minorAxis * 1. / viewport) * pos2d.w, pos2d.zw);\r\n        }`;\r\n\r\n    protected static _FragmentShaderSource = `\r\n        precision highp float;\r\n        varying vec4 vColor;\r\n        varying vec2 vPosition;\r\n        void main () {    \r\n        float A = -dot(vPosition, vPosition);\r\n        if (A < -4.0) discard;\r\n        float B = exp(A) * vColor.a;\r\n        gl_FragColor = vec4(vColor.rgb, B);\r\n        }`;\r\n\r\n    protected static _CreateWorker = function (self: Worker) {\r\n        let viewProj: number[];\r\n        let lastProj: number[] = [];\r\n        let vertexCount = 0;\r\n        let positions: Float32Array;\r\n\r\n        const runSort = (viewProj: number[]) => {\r\n            vertexCount = positions.length;\r\n            const depthMix = new BigInt64Array(vertexCount);\r\n            const indices = new Uint32Array(depthMix.buffer);\r\n            for (let j = 0; j < vertexCount; j++) {\r\n                indices[2 * j] = j;\r\n            }\r\n\r\n            const floatMix = new Float32Array(depthMix.buffer);\r\n            for (let j = 0; j < vertexCount; j++) {\r\n                floatMix[2 * j + 1] = 10000 - (viewProj[2] * positions[3 * j + 0] + viewProj[6] * positions[3 * j + 1] + viewProj[10] * positions[3 * j + 2]);\r\n            }\r\n            lastProj = viewProj;\r\n\r\n            depthMix.sort();\r\n\r\n            self.postMessage({ depthMix }, [depthMix.buffer]);\r\n        };\r\n\r\n        let sortRunning: boolean = false;\r\n        const throttledSort = () => {\r\n            if (!sortRunning) {\r\n                sortRunning = true;\r\n                const lastView = viewProj;\r\n                runSort(lastView);\r\n                setTimeout(() => {\r\n                    sortRunning = false;\r\n                    if (lastView !== viewProj) {\r\n                        throttledSort();\r\n                    }\r\n                }, 0);\r\n            }\r\n        };\r\n\r\n        self.onmessage = (e: any) => {\r\n            /// updated on init\r\n            if (e.data.positions) {\r\n                positions = e.data.positions;\r\n            }\r\n            /// udpate on view changed\r\n            else if (e.data.view) {\r\n                viewProj = e.data.view;\r\n                const dot = lastProj[2] * viewProj[2] + lastProj[6] * viewProj[6] + lastProj[10] * viewProj[10];\r\n                if (Math.abs(dot - 1) < 0.01) {\r\n                    return;\r\n                }\r\n                if (positions) {\r\n                    throttledSort();\r\n                }\r\n            }\r\n        };\r\n    };\r\n\r\n    protected _setData(binaryData: Uint8Array) {\r\n        const rowLength = 3 * 4 + 3 * 4 + 4 + 4;\r\n        this._vertexCount = binaryData.length / rowLength;\r\n        const vertexCount = this._vertexCount;\r\n\r\n        const textureSize = this._getTextureSize(vertexCount);\r\n        const textureLength = textureSize.x * textureSize.y;\r\n        this._positions = new Float32Array(3 * textureLength);\r\n        this._covA = new Float32Array(3 * textureLength);\r\n        this._covB = new Float32Array(3 * textureLength);\r\n\r\n        const f_buffer = new Float32Array(binaryData.buffer);\r\n        this._uBuffer = new Uint8Array(binaryData.buffer);\r\n\r\n        const matrixRotation = Matrix.Zero();\r\n        const matrixScale = Matrix.Zero();\r\n        const quaternion = Quaternion.Identity();\r\n\r\n        this._minimum.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n        this._maximum.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n\r\n        for (let i = 0; i < vertexCount; i++) {\r\n            const x = f_buffer[8 * i + 0];\r\n            const y = -f_buffer[8 * i + 1];\r\n            const z = f_buffer[8 * i + 2];\r\n\r\n            this._positions[3 * i + 0] = x;\r\n            this._positions[3 * i + 1] = y;\r\n            this._positions[3 * i + 2] = z;\r\n\r\n            this._minimum.minimizeInPlaceFromFloats(x, y, z);\r\n            this._maximum.maximizeInPlaceFromFloats(x, y, z);\r\n\r\n            quaternion.set(\r\n                (this._uBuffer[32 * i + 28 + 1] - 128) / 128,\r\n                (this._uBuffer[32 * i + 28 + 2] - 128) / 128,\r\n                (this._uBuffer[32 * i + 28 + 3] - 128) / 128,\r\n                -(this._uBuffer[32 * i + 28 + 0] - 128) / 128\r\n            );\r\n            quaternion.toRotationMatrix(matrixRotation);\r\n\r\n            Matrix.ScalingToRef(f_buffer[8 * i + 3 + 0] * 2, f_buffer[8 * i + 3 + 1] * 2, f_buffer[8 * i + 3 + 2] * 2, matrixScale);\r\n\r\n            const M = matrixRotation.multiplyToRef(matrixScale, TmpVectors.Matrix[0]).m;\r\n\r\n            this._covA[i * 3 + 0] = M[0] * M[0] + M[1] * M[1] + M[2] * M[2];\r\n            this._covA[i * 3 + 1] = M[0] * M[4] + M[1] * M[5] + M[2] * M[6];\r\n            this._covA[i * 3 + 2] = M[0] * M[8] + M[1] * M[9] + M[2] * M[10];\r\n            this._covB[i * 3 + 0] = M[4] * M[4] + M[5] * M[5] + M[6] * M[6];\r\n            this._covB[i * 3 + 1] = M[4] * M[8] + M[5] * M[9] + M[6] * M[10];\r\n            this._covB[i * 3 + 2] = M[8] * M[8] + M[9] * M[9] + M[10] * M[10];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Construct a Gaussian Splatting proxy object\r\n     * @param name name of the mesh used for rendering\r\n     * @param scene scene it belongs to\r\n     */\r\n    public constructor(name: string, scene: Scene) {\r\n        this.scene = scene;\r\n        this.name = name;\r\n        this._createMaterial(scene);\r\n        this._worker?.terminate();\r\n        this._worker = null;\r\n    }\r\n\r\n    private _loadData(data: ArrayBuffer) {\r\n        if (this.mesh) {\r\n            this.dispose();\r\n        }\r\n        this._setData(new Uint8Array(data as any));\r\n        const splatIndex = new Float32Array(this.vertexCount * 1);\r\n\r\n        const updateInstances = (indexMix: Uint32Array) => {\r\n            for (let j = 0; j < this.vertexCount; j++) {\r\n                splatIndex[j] = indexMix[2 * j];\r\n            }\r\n            this.mesh?.thinInstanceBufferUpdated(\"splatIndex\"); // update splatIndex only\r\n        };\r\n\r\n        // update so this.mesh is valid when exiting this function\r\n        this.mesh = this._getMesh(this.scene);\r\n        this.mesh.forcedInstanceCount = this.vertexCount;\r\n        this.mesh.thinInstanceSetBuffer(\"splatIndex\", splatIndex, 1, false);\r\n\r\n        const createTextureFromData = (data: Float32Array, width: number, height: number, format: number) => {\r\n            return new RawTexture(data, width, height, format, this.scene, false, false, Constants.TEXTURE_BILINEAR_SAMPLINGMODE, Constants.TEXTURETYPE_FLOAT);\r\n        };\r\n\r\n        // additional conversion to avoid breaking the original data\r\n        const convertRgbToRgba = (rgb: Float32Array) => {\r\n            const count = rgb.length / 3;\r\n            const rgba = new Float32Array(count * 4);\r\n            for (let i = 0; i < count; ++i) {\r\n                rgba[i * 4 + 0] = rgb[i * 3 + 0];\r\n                rgba[i * 4 + 1] = rgb[i * 3 + 1];\r\n                rgba[i * 4 + 2] = rgb[i * 3 + 2];\r\n                rgba[i * 4 + 3] = 1.0;\r\n            }\r\n            return rgba;\r\n        };\r\n\r\n        /// create textures for gaussian info\r\n        if (this._material.name == \"GaussianSplattingShader\") {\r\n            const material = this.mesh.material as ShaderMaterial;\r\n\r\n            const textureSize = this._getTextureSize(this.vertexCount);\r\n            material.setVector2(\"dataTextureSize\", textureSize);\r\n\r\n            const convATexture = createTextureFromData(convertRgbToRgba(this._covA), textureSize.x, textureSize.y, Constants.TEXTUREFORMAT_RGBA);\r\n            material.setTexture(\"covariancesATexture\", convATexture);\r\n\r\n            const convBTexture = createTextureFromData(convertRgbToRgba(this._covB), textureSize.x, textureSize.y, Constants.TEXTUREFORMAT_RGBA);\r\n            material.setTexture(\"covariancesBTexture\", convBTexture);\r\n\r\n            const centersTexture = createTextureFromData(convertRgbToRgba(this._positions), textureSize.x, textureSize.y, Constants.TEXTUREFORMAT_RGBA);\r\n            material.setTexture(\"centersTexture\", centersTexture);\r\n\r\n            const colorArray = new Float32Array(textureSize.x * textureSize.y * 4);\r\n            for (let i = 0; i < this.vertexCount; ++i) {\r\n                colorArray[i * 4 + 0] = this._uBuffer[32 * i + 24 + 0] / 255;\r\n                colorArray[i * 4 + 1] = this._uBuffer[32 * i + 24 + 1] / 255;\r\n                colorArray[i * 4 + 2] = this._uBuffer[32 * i + 24 + 2] / 255;\r\n                colorArray[i * 4 + 3] = this._uBuffer[32 * i + 24 + 3] / 255;\r\n            }\r\n            const colorsTexture = createTextureFromData(colorArray, textureSize.x, textureSize.y, Constants.TEXTUREFORMAT_RGBA);\r\n            material.setTexture(\"colorsTexture\", colorsTexture);\r\n        }\r\n\r\n        this._worker = new Worker(\r\n            URL.createObjectURL(\r\n                new Blob([\"(\", GaussianSplatting._CreateWorker.toString(), \")(self)\"], {\r\n                    type: \"application/javascript\",\r\n                })\r\n            )\r\n        );\r\n\r\n        /// set positions only once, no need to update on view changed\r\n        this._worker?.postMessage({ positions: this._positions.slice(0, this._vertexCount * 3) }, [this._positions.buffer]);\r\n        this._positions = new Float32Array(0);\r\n\r\n        this._worker.onmessage = (e) => {\r\n            const indexMix = new Uint32Array(e.data.depthMix.buffer);\r\n            updateInstances(indexMix);\r\n        };\r\n        const viewport = new Vector2();\r\n        this._sceneBeforeRenderObserver = this.scene.onBeforeRenderObservable.add(() => {\r\n            const engine = this.scene.getEngine();\r\n            viewport.set(engine.getRenderWidth(), engine.getRenderHeight());\r\n            this._material.setVector2(\"viewport\", viewport);\r\n            const meshWorldMatrix = this.mesh!.getWorldMatrix();\r\n            meshWorldMatrix.multiplyToRef(this.scene.activeCamera!.getViewMatrix(), this._modelViewMatrix);\r\n            const binfo = this.mesh!.getBoundingInfo();\r\n            binfo.reConstruct(this._minimum, this._maximum, meshWorldMatrix);\r\n            binfo.isLocked = true;\r\n            this._material.setMatrix(\"modelView\", this._modelViewMatrix);\r\n            this._worker?.postMessage({ view: this._modelViewMatrix.m });\r\n        });\r\n        this._sceneDisposeObserver = this.scene.onDisposeObservable.add(() => {\r\n            this.dispose();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Loads a .splat Gaussian Splatting array buffer asynchronously\r\n     * @param data arraybuffer containing splat file\r\n     * @returns a promise that resolves when the operation is complete\r\n     */\r\n\r\n    public loadDataAsync(data: ArrayBuffer): Promise<void> {\r\n        return Promise.resolve(this._loadData(data));\r\n    }\r\n    /**\r\n     * Loads a .splat Gaussian Splatting file asynchronously\r\n     * @param url path to the splat file to load\r\n     * @returns a promise that resolves when the operation is complete\r\n     */\r\n    public loadFileAsync(url: string): Promise<void> {\r\n        return Tools.LoadFileAsync(url, true).then((data) => {\r\n            this._loadData(data);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clear datas used for Gaussian Splatting and associated resources\r\n     */\r\n    public dispose(): void {\r\n        this.scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n        this.scene.onBeforeRenderObservable.remove(this._sceneBeforeRenderObserver);\r\n        this._worker?.terminate();\r\n        this._worker = null;\r\n        this.mesh?.dispose();\r\n        this.mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Calculate the texture size of Gaussian Splatting data\r\n     * @param length number of splattings\r\n     * @returns texture size in Vector2\r\n     */\r\n    private _getTextureSize(length: number): Vector2 {\r\n        const engine = this.scene.getEngine();\r\n        const width = engine.getCaps().maxTextureSize;\r\n        let height = 1;\r\n        if (engine.webGLVersion === 1 && !engine.isWebGPU) {\r\n            while (width * height < length) {\r\n                height *= 2;\r\n            }\r\n        } else {\r\n            height = Math.ceil(length / width);\r\n        }\r\n        if (height > width) {\r\n            Logger.Warn(\"GaussianSplatting texture size: (\" + width + \", \" + height + \"), maxTextureSize: \" + width);\r\n            height = width;\r\n        }\r\n        return new Vector2(width, height);\r\n    }\r\n}\r\n"]}